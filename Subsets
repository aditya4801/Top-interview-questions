Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]



class Solution {
public:
void solve(vector<int>&nums, int i, vector<vector<int>>&ans, vector<int>&ds){
   
   ans.push_back(ds); // entering the empty data structure to ans
   
   for(int j=i; j < nums.size(); j++){
      
      ds.push_back(nums[j]); // entering the curr index digit
      solve(nums, i+1, ans, ds); //recursive call 
      ds.pop_back(); //backtrack
   }
}
    vector<vector<int>> subsets(vector<int>& nums) {
      
      vector<vector<int>>ans;
      vector<int> ds;
      
      solve(nums,0,ans,ds);
      
      return ans; 
      
      }
    };
