Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

**************************************************************code*************************************************************************************

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>res;
        
        if(nums.empty())
        return res;
        
        sort(nums.begin(), nums.end());
        int n= nums.size();
        
        for(int i=0;i<n;i++){
        if(nums[i]>0)
         break;
         
        if(i>0 && nums[i]==nums[i-1])
         continue;
         
        int left=i+1, right= n-1;
        
        int sum = nums[i] + nums[left] + nums[right];
        
        if(sum<0)
          left++;
        else if(sum>0)
          right--;
          
        else{
        res.push_back({nums[i],nums[left],nums[right]});
        
        last_left= nums[left], last_right= nums[right];
        
        while(left < right && nums[left]=last_left) left++;
        while(left < right && nums[right]==last_right) right--;
        }
        }
        }
        return res;
     }
    };
